{"pages":[{"title":"Angular Full-Stack","text":"Documentation Home Generators Available generators: App angular-fullstack (aka angular-fullstack:app) Server Side angular-fullstack:endpoint Client Side (via generator-ng-component) angular-fullstack:route angular-fullstack:component angular-fullstack:controller angular-fullstack:filter angular-fullstack:directive angular-fullstack:service angular-fullstack:provider angular-fullstack:factory angular-fullstack:decorator Deployment angular-fullstack:openshift angular-fullstack:heroku Injection A gulp task looks for new SCSS\/LESS\/Stylus files in your client\/app and client\/components folder and automatically injects them into the main style file (ex client\/app\/app.scss) based on an injection block. Configuration Yeoman generated projects can be further tweaked according to your needs by modifying project files appropriately. A .yo-rc file is generated for helping you copy configuration across projects, and to allow you to keep track of your settings. You can change this as you see fit. Testing Running gulp test will run the client and server unit tests with karma and mocha. Use gulp test:server to only run server tests. Use gulp test:client to only run client tests. Protractor tests To setup protractor e2e tests, you must first run npm run update-webdriver Use gulp test:e2e to have protractor go through tests located in the e2e folder. Code Coverage Use gulp test:coverage to run mocha-istanbul and generate code coverage reports. coverage\/server will be populated with e2e and unit folders containing the lcov reports. The coverage taget has 3 available options: test:coverage:unit generate server unit test coverage test:coverage:e2e generate server e2e test coverage test:coverage:check combine the coverage reports and check against predefined thresholds when no option is given test:coverage runs all options in the above order Debugging Use gulp serve:debug for a more debugging-friendly environment. Environment Variables Keeping your app secrets and other sensitive information in source control isn't a good idea. To have gulp launch your app with specific environment variables, add them to the git ignored environment config file: server\/config\/local.env.js. Project Structure Overview \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 client \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 app - All of our app specific components go in here \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 assets - Custom assets: fonts, images, etc\u00e2\u0080\u00a6 \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 components - Our reusable components, non-specific to our app \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 e2e - Our protractor end to end tests \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 server \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 api - Our apps server api \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 auth - For handling authentication with different auth strategies \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 components - Our reusable or app-wide components \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 config - Where we do the bulk of our apps configuration \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 local.env.js - Keep our environment variables out of source control \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 environment - Configuration specific to the node environment \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 views - Server rendered views An example client component in client\/app main \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.js - Routes \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.controller.js - Controller for our main route \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.controller.spec.js - Test \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.html - View \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 main.less - Styles An example server component in server\/api thing \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 index.js - Routes \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.controller.js - Controller for our `thing` endpoint \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.model.js - Database model \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.socket.js - Register socket events \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.spec.js - Test","tags":"","url":"index.html"},{"title":"Prerequisites","text":"Prerequisites Make sure you have all the required dependencies available: npm install -g yo gulp-cli generator-angular-fullstack If you're using MongoDB (which you probably are), you'll have to install it from here. You should then run the mongod process, which is in &lt;install_path&gt;\/MongoDB\/Server\/&lt;version&gt;\/bin\/. You'll also want a \/data\/db folder somewhere for Mongo to put your database in. It would be wise to make a script to automate this command, and maybe even run this script on your computer's startup. Example: #!\/bin\/bash \/var\/lib\/mongo\/server\/3.2\/bin\/mongod --dbpath \/data\/db Make a new directory, and cd into it: mkdir myapp &amp;&amp; cd $_ Run yo angular-fullstack, optionally passing an app name: yo angular-fullstack You'll then be asked a series of questions regarding options for the generated app. Such things include using JavaScript or TypeScript, HTML or Pug, Bootstrap, SQL, and so on. If you don't know what to answer for a question, just hitting ENTER will use the default options for that question, and move on to the next one.","tags":"","url":"Getting_Started\/Prerequisites.html"},{"title":"Installation","text":"","tags":"","url":"Getting_Started\/Installation.html"},{"title":"Running the Generator","text":"","tags":"","url":"Getting_Started\/Running_the_Generator.html"},{"title":"Project Overview","text":"","tags":"","url":"Getting_Started\/Project_Overview.html"},{"title":"title","text":"[STUB]","tags":"","url":"Deployment\/title.html"},{"title":"title","text":"[STUB]","tags":"","url":"Developing\/title.html"},{"title":"title","text":"[STUB]","tags":"","url":"Examples\/title.html"},{"title":"Heroku Deployment","text":"After you have generated the app, go to heroku.com and create and application manually (ex. foo-bar-42424). Then, starting frome the root folder, run the following commands: grunt build `cd dist heroku login (if you are not already authenticated) heroku git:remote -a foo-bar-42424 cd .. grunt build (not sure if this one is necessary) grunt buildcontrol:heroku -- @flaurian via #1966","tags":"","url":"Examples\/Heroku_Deployment.html"},{"title":"Modal","text":"[stub]","tags":"","url":"Examples\/Modal.html"},{"title":"app","text":"App Sets up a new AngularJS + Express app, generating all the boilerplate you need to get started. Usage: Usage: yo angular-fullstack:app [options] [&lt;name&gt;] Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers Default: false --skip-install # Do not install dependencies Default: false --app-suffix # Allow a custom suffix to be added to the module name Default: App --dev-port # Port to use for the development HTTP server Default: 9000 --debug-port # Port to use for the server debugger Default: 5858 --prod-port # Port to use for the production HTTP Server Default: 8080 Arguments: name Type: String Required: false","tags":"","url":"Generators\/app.html"},{"title":"component","text":"Component Generates an Angular 1.5 component. Example: yo angular-fullstack:component name [?] Where would you like to create this component? client\/app\/ Produces: client\/app\/name\/name.component.js client\/app\/name\/name.component.spec.js","tags":"","url":"Generators\/component.html"},{"title":"controller","text":"Controller Generates a controller. Example: yo angular-fullstack:controller user [?] Where would you like to create this controller? client\/app\/ Produces: client\/app\/user\/user.controller.js client\/app\/user\/user.controller.spec.js","tags":"","url":"Generators\/controller.html"},{"title":"decorator","text":"Decorator Generates an AngularJS service decorator. Example: yo angular-fullstack:decorator serviceName [?] Where would you like to create this decorator? client\/app\/ Produces client\/app\/serviceName\/serviceName.decorator.js","tags":"","url":"Generators\/decorator.html"},{"title":"directive","text":"Directive Generates a directive. Example: yo angular-fullstack:directive myDirective [?] Where would you like to create this directive? client\/app\/ [?] Does this directive need an external html file? Yes Produces: client\/app\/myDirective\/myDirective.directive.js client\/app\/myDirective\/myDirective.directive.spec.js client\/app\/myDirective\/myDirective.html client\/app\/myDirective\/myDirective.scss Simple directive without an html file Example: yo angular-fullstack:directive simple [?] Where would you like to create this directive? client\/app\/ [?] Does this directive need an external html file? No Produces: client\/app\/simple\/simple.directive.js client\/app\/simple\/simple.directive.spec.js","tags":"","url":"Generators\/directive.html"},{"title":"endpoint","text":"Endpoint Generates a new API endpoint. Usage: Usage: yo angular-fullstack:endpoint [options] &lt;name&gt; Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers Default: false --route # URL for the endpoint --models # Specify which model(s) to use Options: mongoose, sequelize --endpointDirectory # Parent directory for enpoints Arguments: name Type: String Required: true Example: yo angular-fullstack:endpoint message [?] What will the url of your endpoint be? \/api\/messages Produces: server\/api\/message\/index.js server\/api\/message\/index.spec.js server\/api\/message\/message.controller.js server\/api\/message\/message.integration.js server\/api\/message\/message.model.js (optional) server\/api\/message\/message.events.js (optional) server\/api\/message\/message.socket.js (optional)","tags":"","url":"Generators\/endpoint.html"},{"title":"filter","text":"Filter Generates a filter. Example: yo angular-fullstack:filter myFilter [?] Where would you like to create this filter? client\/app\/ Produces: client\/app\/myFilter\/myFilter.filter.js client\/app\/myFilter\/myFilter.filter.spec.js","tags":"","url":"Generators\/filter.html"},{"title":"heroku","text":"Heroku Deploying to heroku only takes a few steps. yo angular-fullstack:heroku To work with your new heroku app using the command line, you will need to run any heroku commands from the dist folder. If you're using mongoDB you will need to add a database to your app: heroku addons:create mongolab Note: if you get an Error: No valid replicaset instance servers found you need to modify moongose connection options in config\/environment\/production.js as follows: options: { db: { safe: true, replset: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } }, server: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } } } } One of the odd things about the Node driver is that the default timeout for replica set connections is only 1 second, so make sure you're setting it to something more like 30s like in this example. Your app should now be live. To view it run heroku open. If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using Facebook oAuth we would do this : heroku config:set FACEBOOK_ID=id heroku config:set FACEBOOK_SECRET=secret You will also need to set DOMAIN environment variable: heroku config:set DOMAIN=&lt;your-heroku-app-name&gt;.herokuapp.com # or (if you're using it): heroku config:set DOMAIN=&lt;your-custom-domain&gt; To make your deployment process easier consider using grunt-build-control. Pushing Updates gulp build Commit and push the resulting build, located in your dist folder: gulp buildcontrol:heroku","tags":"","url":"Generators\/heroku.html"},{"title":"openshift","text":"###Openshift Note: Openshift uses a quite old version of Node by default. We strongly recommend updating your Node version. Here's a helpful article. Deploying to OpenShift can be done in just a few steps: yo angular-fullstack:openshift A live application URL will be available in the output. oAuth If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using Facebook oAuth we would do this : rhc set-env FACEBOOK_ID=id -a my-openshift-app rhc set-env FACEBOOK_SECRET=secret -a my-openshift-app You will also need to set DOMAIN environment variable: rhc set-env DOMAIN=&lt;your-openshift-app-name&gt;.rhcloud.com # or (if you're using it): rhc set-env DOMAIN=&lt;your-custom-domain&gt; After you've set the required environment variables, restart the server: rhc app-restart -a my-openshift-app To make your deployment process easier consider using grunt-build-control. Pushing Updates gulp build Commit and push the resulting build, located in your dist folder: gulp buildcontrol:openshift","tags":"","url":"Generators\/openshift.html"},{"title":"route","text":"Route Generates a new route. Example: yo angular-fullstack:route myroute [?] What module name would you like to use? myApp [?] Where would you like to create this route? client\/app\/ [?] What will the url of your route be? \/myroute Produces: client\/app\/myroute\/myroute.js client\/app\/myroute\/myroute.controller.js client\/app\/myroute\/myroute.controller.spec.js client\/app\/myroute\/myroute.html client\/app\/myroute\/myroute.scss","tags":"","url":"Generators\/route.html"},{"title":"service","text":"Service Generates an AngularJS service. Example: yo angular-fullstack:service myService [?] Where would you like to create this service? client\/app\/ Produces: client\/app\/myService\/myService.service.js client\/app\/myService\/myService.service.spec.js You can also do yo angular-fullstack:factory and yo angular-fullstack:provider for other types of services.","tags":"","url":"Generators\/service.html"}]}